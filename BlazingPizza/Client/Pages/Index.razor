@page "/"

@inject HttpClient HttpClient
@inject OrderState OrderState
@inject NavigationManager NavigationManager

<div class="main">
    @if (_specials is null)
    {
        <div class="loading-bar"></div>
    }
    <ul class="pizza-cards">
        @if (_specials != null)
        {
            @foreach (var special in _specials)
            {
                <li @onclick="@(()=>OrderState.ShowConfigurePizzaDialog(special))"
                    style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }

    </ul>
</div>

<div class="sidebar">
    @if (OrderState.Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Tu orden</h2>

            @foreach (var configuredPizza in OrderState.Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza"
                                     OnRemoved="@(() =>
                                        OrderState.RemoveConfiguredPizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Selecciona una pizza<br>para comenzar</div>
    }

<div class="order-total @(OrderState.Order.Pizzas.Any() ? "" : "hidden")">
    Total:
    <span class="total-price">@OrderState.Order.GetFormattedTotalPrice()</span>
    <a href="checkout" class="btn btn-warning @(OrderState.Order.Pizzas.Count == 0)">
        Ordenar >
    </a>
</div>
</div>

@if (OrderState.showingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="OrderState.configuringPizza"
                          OnCancel="OrderState.CancelConfigurePizzaDialog"
                          OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
}

@code{

    //02-customize-a-pizza.md

    List<PizzaSpecial> _specials;


    protected override async Task OnInitializedAsync()
    {
        _specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>("specials");
    }


    
}