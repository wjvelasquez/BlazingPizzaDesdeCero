@page "/"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="main">
    @if (_specials is null)
    {
        <div class="loading-bar"></div>
    }
    <ul class="pizza-cards">
        @if (_specials != null)
        {
            @foreach (var special in _specials)
            {
                <li @onclick="@(()=>ShowConfigurePizzaDialog(special))"
                    style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }

    </ul>
</div>

<div class="sidebar">
    @if (order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Tu orden</h2>

            @foreach (var configuredPizza in order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza"
                                     OnRemoved="@(() => RemoveConfiguredPizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Selecciona una pizza<br>para comenzar</div>
    }

    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <button class="btn btn-warning" disabled="@(order.Pizzas.Count == 0)"
                @onclick="PlaceOrder">
            Ordenar >
        </button>
    </div>
</div>

@if (showingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="configuringPizza"
                          OnCancel="CancelConfigurePizzaDialog"
                          OnConfirm="ConfirmConfigurePizzaDialog" />
}

@code{

    //02-customize-a-pizza.md

    List<PizzaSpecial> _specials;
    Pizza configuringPizza;
    bool showingConfigureDialog;
    Order order = new Order();

    protected override async Task OnInitializedAsync()
    {
        _specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>("specials");
    }

    void ShowConfigurePizzaDialog(PizzaSpecial special)
    {
        configuringPizza = new Pizza()
        {
            Special = special,
            SpecialId = special.Id,
            Size = Pizza.DefaultSize,
            Toppings = new List<PizzaTopping>(),
        };

        showingConfigureDialog = true;
    }

    void CancelConfigurePizzaDialog()
    {
        configuringPizza = null;
        showingConfigureDialog = false;
    }

    void ConfirmConfigurePizzaDialog()
    {

        order.Pizzas.Add(configuringPizza);
        configuringPizza = null;

        showingConfigureDialog = false;
    }

    void RemoveConfiguredPizza(Pizza pizza)
    {
        order.Pizzas.Remove(pizza);
    }

    async Task PlaceOrder()
    {
        var response =
            await HttpClient.PostAsJsonAsync("orders", order);
        var newOrderId =
            await response.Content.ReadFromJsonAsync<int>();
        order = new Order();
        NavigationManager.NavigateTo($"myorders/{newOrderId}");
    }
}