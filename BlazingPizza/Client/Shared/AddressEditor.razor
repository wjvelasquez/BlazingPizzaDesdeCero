@inject IJSRuntime JSRuntime

<div class="form-field">
    <label>Nombre:</label>
    <div>
        <InputText id="addressName" @bind-Value="Address.Name"  />
        <ValidationMessage For="@(() => Address.Name)" />
    </div>
</div>

<div class="form-field">
    <label>Linea 1:</label>
    <div>
        <InputText @bind-Value="Address.Line1" />
        <ValidationMessage For="@(() => Address.Line1)" />
    </div>
</div>

<div class="form-field">
    <label>Linea 2:</label>
    <div>
        <InputText @bind-Value="Address.Line2" />
    </div>
</div>

<div class="form-field">
    <label>Ciudad:</label>
    <div>
        <InputText @bind-Value="Address.City" />
        <ValidationMessage For="@(() => Address.City)" />
    </div>
</div>

<div class="form-field">
    <label>Estado:</label>
    <div>
        <InputText @bind-Value="Address.Region" />
        <ValidationMessage For="@(() => Address.Region)" />
    </div>
</div>

<div class="form-field">
    <label>Codigo postal:</label>
    <div>
        <InputText @bind-Value="Address.PostalCode" />
        <ValidationMessage For="@(() => Address.PostalCode)" />
    </div>
</div>


@code {
    [Parameter]
    public Address Address { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //await JSRuntime.InvokeVoidAsync("eval",
            await JSRuntime.EvalVoidAsync(
@"
                var element = document.querySelector('#addressName')
                if (element) {
                    element.focus();
                };
");


            ////en archivo externo y usando script en index.html
            //await JSRuntime.InvokeVoidAsync("blazorJSFunctions.focus", "#addressName");
            //await JSRuntime.Focus2("addressName");
        }

    }
}
